import java.util.*;

class Solution {
    public int numBusesToDestination(int[][] routes, int source, int target) {
        if (source == target) return 0; // Already at target
        
        Map<Integer, List<Integer>> stopToBuses = new HashMap<>();
        
        // Step 1: Build stop-to-bus map
        for (int bus = 0; bus < routes.length; bus++) {
            for (int stop : routes[bus]) {
                stopToBuses.putIfAbsent(stop, new ArrayList<>());
                stopToBuses.get(stop).add(bus);
            }
        }
        
        // Edge case: If source or target is not in any route, return -1
        if (!stopToBuses.containsKey(source) || !stopToBuses.containsKey(target)) return -1;

        // Step 2: BFS Initialization
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> visitedStops = new HashSet<>();
        Set<Integer> visitedBuses = new HashSet<>();
        int busCount = 0;

        // Add all buses available at the source stop
        for (int bus : stopToBuses.get(source)) {
            queue.add(bus);
            visitedBuses.add(bus);
        }

        // Step 3: BFS Traversal
        while (!queue.isEmpty()) {
            int levelSize = queue.size();
            busCount++;

            for (int i = 0; i < levelSize; i++) {
                int bus = queue.poll();

                for (int stop : routes[bus]) {
                    if (stop == target) return busCount; // Reached target

                    if (!visitedStops.contains(stop)) {
                        visitedStops.add(stop);

                        // Add all buses available at this stop
                        for (int nextBus : stopToBuses.get(stop)) {
                            if (!visitedBuses.contains(nextBus)) {
                                queue.add(nextBus);
                                visitedBuses.add(nextBus);
                            }
                        }
                    }
                }
            }
        }

        return -1; // Target is unreachable
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        
        // Test Case 1
        int[][] routes1 = {{1,2,7}, {3,6,7}};
        System.out.println(sol.numBusesToDestination(routes1, 1, 6)); // Output: 2
        
        // Test Case 2
        int[][] routes2 = {{7,12},{4,5,15},{6},{15,19},{9,12,13}};
        System.out.println(sol.numBusesToDestination(routes2, 15, 12)); // Output: -1
    }
}

Time & Space Complexity Analysis
Building the stop-to-bus map: O(N * M) where N = routes.length and M = avg(route size).
BFS Traversal:
Each bus and stop is visited at most once â†’ O(N + M).
Total Complexity: O(N * M), which is efficient for large inputs.
