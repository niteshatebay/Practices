class Stat {
    double avg;
    int count;

    public Stat(double avg, int count) {
        this.avg = avg;
        this.count = count;
    }

    @Override
    public String toString() {
        return "Stat{" +
                "avg=" + avg +
                ", count=" + count +
                '}';
    }
}

class SortComparator implements Comparator<Stat> {
    @Override
    public int compare(Stat s1, Stat s2) {
        int comp = Integer.compare(s2.count, s1.count);
        if(comp == 0) {
            comp = Double.compare(s2.avg, s1.avg);
        }
        return comp;
    }
}
public class Test {
    public static void main(String[] args) {
        List<Stat> list = new ArrayList<>();
        list.add(new Stat(1.2, 2));
        list.add(new Stat(5.2, 3));
        list.add(new Stat(5.2, 5));
        list.sort(new SortComparator());
        System.out.println(list);
    }
}

--------

int[] arr = {5,4,6,1,8};
int[] descArr = Arrays.stream(arr).boxed().sorted(Collections.reverseOrder()).mapToInt(Integer::intValue).toArray();
System.out.println(Arrays.toString(descArr));

Integer[] arr1 = {5, 4, 6, 1, 8};
Arrays.sort(arr1, Collections.reverseOrder());
System.out.println(Arrays.toString(arr1));
------

class Book{
    private String name;
    private String author;
    Book(String name, String author) {
        this.name = name;
        this.author = author;
    }
    public String getName() {
          return name;
    }
    public String getAuthor() {
        return author;
    }
}
//List to Map
List<Book> list = new ArrayList<>();
list.add(new Book("A", "ABC"));
list.add(new Book("X", "XYZ"));
Map<String, String> map = list.stream().collect(Collectors.toMap(item -> item.getName(), item -> item.getAuthor()));


// Create a list
List<Integer> list = Arrays.asList(1, 2, 3, 4, 5);

// Convert list to int array
int[] array = list.stream().mapToInt(Integer::intValue).toArray();

int[] array = {1, 2, 2, 3, 4, 4, 5};

// Remove duplicates using streams
int[] uniqueArray = Arrays.stream(array).distinct().toArray();

PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> Integer.compare(a[1], b[1])); //min heap
PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> Integer.compare(b[1], a[1])); //max heap

---
List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 2, 3, 6, 7, 8, 1);

List<Integer> uniqueNumbers = numbers.stream()
    .distinct() // Removes duplicates
    .collect(Collectors.toList());

System.out.println("Unique Elements: " + uniqueNumbers); 
// Output: [1, 2, 3, 4, 5, 6, 7, 8]
-----
List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 2, 3, 6, 7, 8, 1);

Set<Integer> seen = new HashSet<>();
Set<Integer> duplicates = numbers.stream()
    .filter(n -> !seen.add(n)) // If add() returns false, it's a duplicate
    .collect(Collectors.toSet());

System.out.println("Duplicates: " + duplicates); // Output: [1, 2, 3]
