package com.practice;

public class CustomQueue<T> {
    private T[] queueArray; // Array to store queue elements
    private int front;      // Index of the front element
    private int rear;       // Index of the rear element
    private int capacity;   // Maximum capacity of the queue
    private int size;       // Current size of the queue

    // Constructor to initialize the queue
    @SuppressWarnings("unchecked")
    public CustomQueue(int capacity) {
        this.capacity = capacity;
        queueArray = (T[]) new Object[capacity];
        front = 0;
        rear = -1;
        size = 0;
    }

    // Method to add an element to the queue
    public void enqueue(T element) {
        if (isFull()) {
            throw new RuntimeException("Queue is full");
        }
        rear = (rear + 1) % capacity; // Circular increment
        queueArray[rear] = element;
        size++;
    }

    // Method to remove an element from the queue
    public T dequeue() {
        if (isEmpty()) {
            throw new RuntimeException("Queue is empty");
        }
        T element = queueArray[front];
        front = (front + 1) % capacity; // Circular increment
        size--;
        return element;
    }

    // Method to get the front element without removing it
    public T peek() {
        if (isEmpty()) {
            throw new RuntimeException("Queue is empty");
        }
        return queueArray[front];
    }

    // Method to check if the queue is empty
    public boolean isEmpty() {
        return size == 0;
    }

    // Method to check if the queue is full
    public boolean isFull() {
        return size == capacity;
    }

    // Method to get the current size of the queue
    public int size() {
        return size;
    }

    // Method to display the elements of the queue
    public void display() {
        if (isEmpty()) {
            System.out.println("Queue is empty");
            return;
        }
        for (int i = 0; i < size; i++) {
            System.out.print(queueArray[(front + i) % capacity] + " ");
        }
        System.out.println();
    }

    // Main method for demonstration
    public static void main(String[] args) {
        CustomQueue<Integer> queue = new CustomQueue<>(5);

        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);
        queue.display(); // Output: 10 20 30

        System.out.println("Dequeued element: " + queue.dequeue()); // Output: 10
        queue.display(); // Output: 20 30

        System.out.println("Front element: " + queue.peek()); // Output: 20
        queue.enqueue(40);
        queue.enqueue(50);
        queue.enqueue(60);
        queue.display(); // Output: 20 30 40 50 60
    }
}

