package com.practice;

public class CustomStack<T> {
    private T[] stackArray; // Array to store stack elements
    private int top;        // Index of the top element
    private int capacity;   // Maximum capacity of the stack

    // Constructor to initialize the stack
    @SuppressWarnings("unchecked")
    public CustomStack(int size) {
        capacity = size;
        stackArray = (T[]) new Object[size]; // Creating a generic array
        top = -1; // Indicates that the stack is empty
    }

    // Method to add an element to the stack
    public void push(T element) {
        if (isFull()) {
            throw new StackOverflowError("Stack is full");
        }
        stackArray[++top] = element; // Increment top and add element
    }

    // Method to remove the top element from the stack
    public T pop() {
        if (isEmpty()) {
            throw new RuntimeException("Stack is empty");
        }
        return stackArray[top--]; // Return top element and decrement top
    }

    // Method to peek at the top element without removing it
    public T peek() {
        if (isEmpty()) {
            throw new RuntimeException("Stack is empty");
        }
        return stackArray[top]; // Return the top element
    }

    // Method to check if the stack is empty
    public boolean isEmpty() {
        return top == -1;
    }

    // Method to check if the stack is full
    public boolean isFull() {
        return top == capacity - 1;
    }

    // Method to get the current size of the stack
    public int size() {
        return top + 1;
    }

    // Method to display the elements of the stack
    public void display() {
        if (isEmpty()) {
            System.out.println("Stack is empty");
            return;
        }
        for (int i = 0; i <= top; i++) {
            System.out.print(stackArray[i] + " ");
        }
        System.out.println();
    }

    // Main method for demonstration
    public static void main(String[] args) {
        CustomStack<Integer> stack = new CustomStack<>(5);

        stack.push(10);
        stack.push(20);
        stack.push(30);
        stack.display(); // Output: 10 20 30

        System.out.println("Popped element: " + stack.pop()); // Output: 30
        stack.display(); // Output: 10 20

        System.out.println("Top element: " + stack.peek()); // Output: 20
        stack.display(); // Output: 10 20
    }
}
