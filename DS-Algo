Input: nums = [3,4,-1,1]
Output: 2
Explanation: 1 is in the array but 2 is missing.

class Solution {
    public int firstMissingPositive(int[] nums) {
        int i = 0;
        while( i < nums.length){
            if(nums[i] > 0 && nums[i] <= nums.length && nums[i] != nums[nums[i] - 1]){
                swap(nums,i,nums[i] - 1);
            }else{
                i++;
            }
        }
        for(i = 0;i<nums.length;i++){
            if(nums[i] != i + 1){
                return i + 1;
            }
        }
        return nums.length + 1;
    }
    
    private void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
------
public int trap(int[] height) {
       int n = height.length;
        int l = 0, r = n - 1;
        int lmax = 0, rmax = 0, ans = 0;

        while (l < r) {
            lmax = Math.max(lmax, height[l]);
            rmax = Math.max(rmax, height[r]);

            if (lmax < rmax) {
                ans += lmax - height[l];
                l++;
            } else {
                ans += rmax - height[r];
                r--;
            }
        }
        return ans;
    }
----
public int numSubarrayProductLessThanK(int[] nums, int k) {
  if (k <= 1) return 0;
  int prod = 1, ans = 0;
  for (int start = 0, end = 0; end < nums.length; end++) {
      prod *= nums[end];
      while (prod >= k) {
          prod /= nums[start];
          start++;
      }
      ans += end - start + 1;
  }
  return ans;
}
-------
Time Complexity : O(n)
Input: arr = [1,3,5]
Output: 4
the number of subarrays with an odd sum

public int numOfSubarrays(int[] arr) {
  int odd = 0;
  int even = 0;
  int ans = 0;
  for(int i:arr){
      if(i% 2 == 0){
          even = even+1;
          
      }else{
          int temp = odd;
          odd = even+1;
          even = temp;
      }
      ans += odd;
  }
  return ans;
}

------
Time Complexity : O(nlogn)
Space Complexity: O(n)

public double[] medianSlidingWindow(int[] nums, int k) {
        double[] result = new double[nums.length - k + 1];
        int i = 0;
        PriorityQueue<Integer> max = new PriorityQueue<>(Collections.reverseOrder());
        PriorityQueue<Integer> min = new PriorityQueue<>();
        
        int start=0, end=0;
        while(end < nums.length) {
            
            if(min.size() == max.size()) {
                min.add(nums[end]);
                max.add(min.poll());
            }
            else {
                max.add(nums[end]);
                min.add(max.poll());
            }
            if(end-start+1 < k) end++;
            
            else if(end-start+1 == k) {
                if(max.size() == min.size())
                    result[i++] = (double) (max.peek() + min.peek()) / 2.0;
                else
                    result[i++] = (double)max.peek();
                
                if(!max.remove(nums[start])) min.remove(nums[start]);
                start++; 
                end++;
            }
        }
        
        return result;
    }

 ------   
class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int preColor = image[sr][sc];
        if(preColor != color){
            dfs(image, sr, sc, color, preColor);
        }
        return image;
    }
    
    void dfs(int[][] image, int i, int j, int color, int preColor) {
        if(i >= 0 && i < image.length && j >= 0 && j < image[0].length && image[i][j] == preColor) {
            image[i][j] = color;
            dfs(image, i-1, j, color, preColor);
            dfs(image, i+1, j, color, preColor);
            dfs(image, i, j-1, color, preColor);
            dfs(image, i, j+1, color, preColor);
        } 
    }
}

------
public int[][] kClosest(int[][] points, int k) {
        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a->a[1]));
        for(int i = 0; i < points.length; i++){
            int sum = points[i][0] * points[i][0] + points[i][1] * points[i][1];
            pq.add(new int[] {i,sum});
        }
        int[][] res = new int[k][2];
        for(int i=0; i<k; i++){
            res[i] = points[pq.poll()[0]];
        }
        return res;
}
