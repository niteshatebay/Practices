class Solution {
    /*
    Start from the last character and move backward.
    At each position (i, j), check:
    If s1[i] == s3[i+j] → Can we form s3 by moving in s1?
    If s2[j] == s3[i+j] → Can we form s3 by moving in s2?
    If either condition holds, mark dp[i][j] = true.
    */
    public boolean isInterleave(String s1, String s2, String s3) {
        int m = s1.length();
        int n = s2.length();
        if (m + n != s3.length()) {
            return false;
        }
        boolean[][] dp = new boolean[m + 1][n + 1];
        dp[m][n] = true;
        
        for (int i = m; i >= 0; i--) {
            for (int j = n; j >= 0; j--) {
                if (i < m && s1.charAt(i) == s3.charAt(i + j) && dp[i + 1][j]) {
                    dp[i][j] = true;
                }
                if (j < n && s2.charAt(j) == s3.charAt(i + j) && dp[i][j + 1]) {
                    dp[i][j] = true;
                }
            }
        }
        return dp[0][0];
    }
}
-----
Subarray Sums Divisible by K
Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]

public int subarraysDivByK(int[] nums, int k) {
    HashMap<Integer, Integer> prefixMap = new HashMap<>();
    prefixMap.put(0, 1);
    int sum = 0, ans = 0;
    for(int i = 0; i < nums.length; i++) {
        sum = (sum + nums[i]) % k;
        if(sum < 0) sum += k;
        if(prefixMap.containsKey(sum)) {
            ans += prefixMap.get(sum);
        }
        prefixMap.put(sum, prefixMap.getOrDefault(sum, 0) + 1);
    }
    return ans;
}
-------
Given an array of integers, return the length of the longest subarray where the sum is divisible by K.
public int subarraysDivByK(int[] nums, int k) {
    HashMap<Integer, Integer> prefixMap = new HashMap<>();
    prefixMap.put(0, -1); // remainder 0 at index -1
    int sum = 0, ans = 0;
    for (int i = 0; i < nums.length; i++) {
        sum = (sum + nums[i]) % k;
        if (sum < 0) sum += k;
        if (prefixMap.containsKey(sum)) {
            ans = Math.max(ans, i - prefixMap.get(sum));
        } else {
            prefixMap.put(sum, i); // store first occurrence
        }
    }
    return ans;
}
-------
TC = O(n) 
Shortest Subarray to be Removed to Make Array Sorted
Input: arr = [1,2,3,10,4,2,3,5]
Output: 3
Explanation: The shortest subarray we can remove is [10,4,2] of length 3. The remaining elements after that will be [1,2,3,3,5] which are sorted.
Another correct solution is to remove the subarray [3,10,4].

public int findLengthOfShortestSubarray(int[] arr) {
        int n = arr.length;

        // find longest non-decreasing prefix
        int left = 0, right = n - 1;
        while (left + 1 < n && arr[left] <= arr[left + 1]) {
            left++;
        }

        // if entire array is already sorted
        if (left == n - 1) return 0;

        // find longest non-decreasing suffix
        while (right > 0 && arr[right] >= arr[right - 1]) {
            right--;
        }

        //  removing either just the prefix or just the suffix.
        int ans = Math.min(n - left - 1, right);

        // use 2 pointers to find smallest middle part to remove
        int start = 0, end = right;
        while (start <= left && end < n) {
            if (arr[start] <= arr[end]) {
                ans = Math.min(ans, end - start - 1);
                start++;
            }
            else {
                end++;
            }
        }

        return ans;
    }
-------
Find K Pairs with Smallest Sums
Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
Output: [[1,2],[1,4],[1,6]]
TC=O(klog(n1))

public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {
    List<List<Integer>> ans = new ArrayList<>();
    PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a->a[0]));

    for(int x : nums1){
        pq.offer(new int[] { x + nums2[0], 0});
    }

    while(k > 0 && !pq.isEmpty()){
        int[] temp = pq.poll();
        int sum = temp[0];
        int pos = temp[1];
        ans.add(List.of(sum-nums2[pos],nums2[pos]));
        if(pos+ 1 < nums2.length){
            pq.offer(new int[] { sum - nums2[pos] + nums2[pos+1], pos+1});
        }
        k--;

    }
    return ans;
}
