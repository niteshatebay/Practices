import java.util.*;

class AdjListNode {
    int vertex, weight;
    AdjListNode(int v, int w)
    {
        vertex = v;
        weight = w;
    }
    int getVertex() { return vertex; }
    int getWeight() { return weight; }
}
public class Dijkstra {
    private int V;
    private LinkedList<AdjListNode>[] adj;

    public Dijkstra(int v) {
        V = v;
        adj = new LinkedList[V];
        for(int i=0; i<V; i++) {
            adj[i] = new LinkedList<>();
        }
    }

    private void addEdge(int v, int w, int weight) {
        adj[v].add(new AdjListNode(w, weight));
    }
    //TC=O ( V + E l o g V )

    private void dijkstraUtil(int source, int destination) {
        int[] distance = new int[V];
        Arrays.fill(distance, Integer.MAX_VALUE);

        int[] parents = new int[V];
        parents[source] = -1;//no parent

        distance[source] = 0;
        PriorityQueue<AdjListNode> pq = new PriorityQueue<>(Comparator.comparingInt(AdjListNode::getWeight));
        pq.add(new AdjListNode(source, 0));
        while (!pq.isEmpty()) {
            AdjListNode current = pq.poll();
            for (AdjListNode n : adj[current.getVertex()]) {
                if (distance[current.getVertex()] + n.getWeight() < distance[n.getVertex()]) {
                    distance[n.getVertex()] = n.getWeight() + distance[current.getVertex()];
                    pq.add(new AdjListNode(n.getVertex(), distance[n.getVertex()]));
                    parents[n.getVertex()] = current.getVertex();
                }
            }
        }
        System.out.println("distance: " + distance[destination]);
        printPath(destination, parents);
    }

    private  void printPath(int currentVertex, int[] parents) {
        if (currentVertex == -1) {
            return;
        }
        printPath(parents[currentVertex], parents);
        System.out.print(currentVertex + " -> ");
    }

    private void dijkstra(int source, int destination) {
        int[] distance = new int[V];
        Arrays.fill(distance, Integer.MAX_VALUE);
        distance[source] = 0;
        PriorityQueue<AdjListNode> pq = new PriorityQueue<>(Comparator.comparingInt(AdjListNode::getWeight));
        pq.add(new AdjListNode(source, 0));
        while (!pq.isEmpty()) {
            AdjListNode current = pq.poll();
            for (AdjListNode n : adj[current.getVertex()]) {
                if (distance[current.getVertex()] + n.getWeight() < distance[n.getVertex()]) {
                    distance[n.getVertex()] = n.getWeight() + distance[current.getVertex()];
                    pq.add(new AdjListNode(n.getVertex(), distance[n.getVertex()]));
                }
            }
        }
        System.out.println("distance: " + distance[destination]);
        for(int i=0; i<V; i++) {
            System.out.println(source + " -> " + i + " distance: " + distance[i]);
        }
    }

    public static void main(String[] args) {
        Dijkstra dj = new Dijkstra(4);
        int source = 0;
        dj.addEdge(0, 1, 2);
        dj.addEdge(0, 2, 10);
        dj.addEdge(1, 2, 2);
        dj.addEdge(1, 3, 10);
        dj.addEdge(2, 1, 2);
        dj.addEdge(2, 3, 2);

        dj.dijkstraUtil(0, 3);
        //dj.dijkstra(0, 3);
    }
}
