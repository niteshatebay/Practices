package com.practice;

import java.util.*;

public class InMemoryCache<K, V> {
    private final int maxSize;                            // Maximum size of the cache
    private final Map<K, V> cache;                        // Main storage
    private final LinkedHashMap<K, Long> accessOrder;     // Tracks access order for LRU eviction

    // Constructor without size limit
    public InMemoryCache() {
        this.maxSize = Integer.MAX_VALUE;                 // No size limit
        this.cache = new HashMap<>();
        this.accessOrder = new LinkedHashMap<>();
    }

    // Constructor with size limit
    public InMemoryCache(int maxSize) {
        this.maxSize = maxSize;
        this.cache = new HashMap<>();
        this.accessOrder = new LinkedHashMap<>(16, 0.75f, true);
    }

    // Put a key-value pair into the cache
    public synchronized void put(K key, V value) {
        if (cache.containsKey(key)) {
            accessOrder.put(key, System.nanoTime());
        } else {
            if (cache.size() >= maxSize) {
                evict();
            }
            accessOrder.put(key, System.nanoTime());
        }
        cache.put(key, value);
    }

    // Get the value associated with the key
    public synchronized V get(K key) {
        if (!cache.containsKey(key)) {
            return null;
        }
        accessOrder.put(key, System.nanoTime());
        return cache.get(key);
    }

    // Delete a key-value pair from the cache
    public synchronized void delete(K key) {
        cache.remove(key);
        accessOrder.remove(key);
    }

    // Check if the cache contains a key
    public synchronized boolean contains(K key) {
        return cache.containsKey(key);
    }

    // Get the current size of the cache
    public synchronized int size() {
        return cache.size();
    }

    // Clear all entries from the cache
    public synchronized void clear() {
        cache.clear();
        accessOrder.clear();
    }

    // Evict the least recently used entry
    private void evict() {
        if (accessOrder.isEmpty()) {
            return;
        }
        K lruKey = accessOrder.entrySet().iterator().next().getKey();
        cache.remove(lruKey);
        accessOrder.remove(lruKey);
    }

    // Display the current state of the cache (for debugging)
    public synchronized void display() {
        System.out.println("Cache: " + cache);
    }

    public static void main(String[] args) {
        InMemoryCache<String, String> cache = new InMemoryCache<>(3);

        cache.put("A", "1");
        cache.put("A", "21");
        cache.put("B", "2");
        cache.put("C", "3");
        cache.display();  // Cache: {A=1, B=2, C=3}

        cache.get("A");   // Access A, making it most recently used
        cache.put("D", "4"); // Evicts B since it's least recently used

        cache.display();  // Cache: {A=1, C=3, D=4}

        cache.delete("A");
        cache.display();  // Cache: {C=3, D=4}
    }
}

