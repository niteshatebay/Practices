import java.util.*;

public class LRUCache<K, V> {
    private final int capacity;
    private final Map<K, Node<K, V>> cache;
    private final Node<K, V> head, tail;

    public LRUCache(int capacity) {
        this.capacity = capacity;
        this.cache = new HashMap<>();
        
        // Dummy head & tail nodes to simplify list operations
        head = new Node<>(null, null);
        tail = new Node<>(null, null);
        head.next = tail;
        tail.prev = head;
    }

    public V get(K key) {
        if (!cache.containsKey(key)) return null;

        Node<K, V> node = cache.get(key);

        // Remove from current position
        node.prev.next = node.next;
        node.next.prev = node.prev;

        // Move to head (most recently used)
        node.next = head.next;
        node.prev = head;
        head.next.prev = node;
        head.next = node;

        return node.value;
    }

    public void put(K key, V value) {
        if (cache.containsKey(key)) {
            Node<K, V> node = cache.get(key);
            node.value = value;

            // Remove from current position
            node.prev.next = node.next;
            node.next.prev = node.prev;

            // Move to head
            node.next = head.next;
            node.prev = head;
            head.next.prev = node;
            head.next = node;
        } else {
            if (cache.size() >= capacity) {
                // Remove tail (Least Recently Used)
                Node<K, V> lru = tail.prev;
                cache.remove(lru.key);
                lru.prev.next = tail;
                tail.prev = lru.prev;
            }

            // Add new node at head
            Node<K, V> newNode = new Node<>(key, value);
            cache.put(key, newNode);
            newNode.next = head.next;
            newNode.prev = head;
            head.next.prev = newNode;
            head.next = newNode;
        }
    }

    public void display() {
        Node<K, V> curr = head.next;
        while (curr != tail) {
            System.out.print(curr.key + " -> ");
            curr = curr.next;
        }
        System.out.println("NULL");
    }

    private static class Node<K, V> {
        K key;
        V value;
        Node<K, V> prev, next;

        public Node(K key, V value) {
            this.key = key;
            this.value = value;
        }
    }

    public static void main(String[] args) {
        LRUCache<Integer, String> cache = new LRUCache<>(3);

        cache.put(1, "A");
        cache.put(2, "B");
        cache.put(3, "C");
        cache.display(); // Expected: 3 -> 2 -> 1 -> NULL

        cache.get(2); // Access 2 (moves to head)
        cache.display(); // Expected: 2 -> 3 -> 1 -> NULL

        cache.put(4, "D"); // 1 is LRU, remove it
        cache.display(); // Expected: 4 -> 2 -> 3 -> NULL
    }
}
