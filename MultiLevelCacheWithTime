package com.telio;
import java.util.*;

interface ILevelCacheV2<Key, Value> {
    WriteResponse set(Key key, Value value);
    ReadResponse<Value> get(Key key);
}

class ReadResponse<Value> {
    private Value value;
    private Double totalTime;

    public ReadResponse(Value value, Double totalTime) {
        this.value = value;
        this.totalTime = totalTime;
    }

    public Value getValue() {
        return value;
    }

    public void setValue(Value value) {
        this.value = value;
    }

    public Double getTotalTime() {
        return totalTime;
    }

    public void setTotalTime(Double totalTime) {
        this.totalTime = totalTime;
    }
}

class WriteResponse {
    private Double timeTaken;

    public WriteResponse(Double timeTaken) {
        this.timeTaken = timeTaken;
    }

    public Double getTimeTaken() {
        return timeTaken;
    }

    public void setTimeTaken(Double timeTaken) {
        this.timeTaken = timeTaken;
    }
}

class CacheProviderV2<Key, Value> {
    private final Map<Key, Value> storage;
    private final Integer capacity;

    public CacheProviderV2(Integer capacity) {
        this.capacity = capacity;
        this.storage = new LinkedHashMap<Key, Value>(capacity, 0.75f, true){
            protected boolean removeEldestEntry(Map.Entry eldest) {
                return size() > capacity;
            }
        };
    }

    public Map<Key, Value> getStorage() {
        return storage;
    }

    public Integer getCapacity() {
        return capacity;
    }

    public void set(Key key, Value value) {
        this.storage.put(key, value);
    }

    public Value get(Key key) {
        return this.storage.get(key);
    }
}

//DefaultLevelCache is a cache at one layer
class DefaultLevelCacheV2<Key, Value> implements ILevelCacheV2<Key, Value> {
    private final CacheProviderV2<Key, Value> cacheProvider;
    private final DefaultLevelCacheV2<Key, Value> next;
    private final int readTime;
    private final int writeTime;

    public DefaultLevelCacheV2(CacheProviderV2<Key, Value> cacheProvider, DefaultLevelCacheV2<Key, Value> next, int readTime, int writeTime) {
        this.cacheProvider = cacheProvider;
        this.next = next;
        this.readTime = readTime;
        this.writeTime = writeTime;
    }

    public int getReadTime() {
        return readTime;
    }

    public int getWriteTime() {
        return writeTime;
    }

    public CacheProviderV2<Key, Value> getCacheProvider() {
        return cacheProvider;
    }

    public DefaultLevelCacheV2<Key, Value> getNext() {
        return next;
    }


    @Override
    public WriteResponse set(Key key, Value value) {
        Double curTime = 0.0;
        Value curLevelValue = cacheProvider.get(key);
        curTime += getReadTime();
        if (!value.equals(curLevelValue)) {
            cacheProvider.set(key, value);
            curTime += getWriteTime();
        }
        if(next != null){
            curTime += next.set(key, value).getTimeTaken();
        }
        return new WriteResponse(curTime);
    }

    @Override
    public ReadResponse<Value> get(Key key) {
        Double curTime = 0.0;
        Value curLevelValue = cacheProvider.get(key);
        curTime += getReadTime();
        if (curLevelValue == null && next != null) {
            ReadResponse<Value> nextResponse = next.get(key);
            curTime += nextResponse.getTotalTime();
            curLevelValue = nextResponse.getValue();
            if (curLevelValue != null) {
                cacheProvider.set(key, curLevelValue);
                curTime += getWriteTime();
            }
        }
        return new ReadResponse<>(curLevelValue, curTime);
    }
}

class CacheServiceV2<Key, Value> {
    private final ILevelCacheV2<Key, Value> multiLevelCache;
    public CacheServiceV2(final DefaultLevelCacheV2<Key, Value> multiLevelCache) {
        this.multiLevelCache = multiLevelCache;
    }

    public ILevelCacheV2<Key, Value> getMultiLevelCache() {
        return multiLevelCache;
    }

    public WriteResponse set(final Key key, final Value value) {
        return multiLevelCache.set(key, value);
    }

    public ReadResponse<Value> get(final Key key) {
        return multiLevelCache.get(key);
    }
}

public class MultiLevelCacheWithTime {
    public static void main(String[] args) {
        CacheProviderV2<String, String> c1 = new CacheProviderV2<>(10);
        CacheProviderV2<String, String> c2 = new CacheProviderV2<>(20);

        DefaultLevelCacheV2<String, String> l2Cache = new DefaultLevelCacheV2<>(c2, null, 2, 4);
        DefaultLevelCacheV2<String, String> l1Cache = new DefaultLevelCacheV2<>(c1, l2Cache, 1, 3);

        //cacheService points to l1Cache -> l2Cache -> l3Cache -> null
        CacheServiceV2<String, String> cacheService = new CacheServiceV2<>(l1Cache);

        WriteResponse w1 = cacheService.set("k1", "v1");
        WriteResponse w2 = cacheService.set("k2", "v2");
        System.out.println("Time taken 1: " + w1.getTimeTaken());
        System.out.println("Time taken 2: " + w2.getTimeTaken());

        ReadResponse<String> r1 = cacheService.get("k1");
        System.out.println("Response 1: " + r1.getValue());
        System.out.println("Response 1: " + r1.getTotalTime());

        ReadResponse<String> r2 = cacheService.get("k1");
        System.out.println("Response 2: " + r2.getValue());
        System.out.println("Response 2: " + r2.getTotalTime());

        // Explicitly remove key from l1
        c1.set("k1", null);
        ReadResponse<String> r1AfterRemovalFromL1 = cacheService.get("k1");
        System.out.println("After removal Response: " + r1AfterRemovalFromL1.getValue());
        System.out.println("After removal Response: " + r1AfterRemovalFromL1.getTotalTime());
    }
}
