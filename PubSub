package com.telio;

import java.util.*;

class Message {
    private final Topic topic;
    private final String payload;

    public Message(Topic topic, String payload) {
        this.topic = topic;
        this.payload = payload;
    }

    public Topic getTopic() {
        return topic;
    }

    public String getPayload() {
        return payload;
    }

    @Override
    public String toString() {
        return "Message: {" + payload + '}';
    }
}

class MessageQueue {
    private final Message[] arr;
    private int front;
    private int rear;
    private final int capacity;
    private int count;

    MessageQueue(int size) {
        arr = new Message[size];
        capacity = size;
        front = 0;
        rear = -1;
        count = 0;
    }

    public Message dequeue()
    {
        if (isEmpty()) {
            System.out.println("Message Queue is empty");
            return null;
        }
        Message message = arr[front];
        front = (front + 1) % capacity;
        count--;
        return message;
    }

    public void enqueue(Message item) {
        if (isFull()) {
            System.out.println("Message Queue is full");
            return;
        }
        System.out.println("Message published: " + item);
        rear = (rear + 1) % capacity;
        arr[rear] = item;
        count++;
    }

    public Message peek() {
        return isEmpty() ? null : arr[front];
    }

    public int size() {
        return count;
    }

    public boolean isEmpty() {
        return (size() == 0);
    }

    public boolean isFull() {
        return (size() == capacity);
    }
}

class Publisher {
    void publishMessage(MessageQueue mq, Message message) {
        mq.enqueue(message);
    }
}

class Subscriber {
    private final String subscriberName;
    private final Topic topic;
    public Subscriber(String subscriberName, Topic topic) {
        this.subscriberName = subscriberName;
        this.topic = topic;
    }

    public void readMessage(Message message,Subscriber subscriber) {
        System.out.println("Message subscribed: " + message + " by subscriber: " + subscriber.getSubscriberName());
    }

    public String getSubscriberName() {
        return subscriberName;
    }

    public Topic getTopic() {
        return topic;
    }
}

class Topic {
    private final String name;

    public Topic(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}

class Broker {
    private final Map<String, List<Subscriber>> topicToSubscribers;
    private final Map<String, MessageQueue> topicToQueue;
    private final int size;

    public Broker(int size) {
        this.size = size;
        topicToSubscribers = new HashMap<>();
        topicToQueue = new HashMap<>();
    }

    public Map<String, MessageQueue> getTopicToQueue() {
        return topicToQueue;
    }

    public int getSize() {
        return size;
    }

    public Map<String, List<Subscriber>> getTopicToSubscribers() {
        return topicToSubscribers;
    }

    public Topic createTopic(String name) {
        if(topicToSubscribers.containsKey(name)) {
            System.out.println("Topic already exists");
            return null;
        }
        Topic topic = new Topic(name);
        System.out.println("Topic created successfully: " + topic.getName());
        topicToSubscribers.put(topic.getName(), new ArrayList<>());
        topicToQueue.put(topic.getName(), new MessageQueue(10));
        return topic;
    }

    public void registerSubscriber(Subscriber subscriber) {
        if(topicToSubscribers.containsKey(subscriber.getTopic().getName())) {
            topicToSubscribers.get(subscriber.getTopic().getName()).add(subscriber);
        } else {
            System.out.println("No topic found with name: " + subscriber.getTopic().getName());
        }
    }

    public void publishMessage(Publisher publisher, Message message) {
        publisher.publishMessage(topicToQueue.get(message.getTopic().getName()), message);
        notifySubscribers(message.getTopic().getName());
    }

    public void notifySubscribers(String topicName) {
        if(!topicToSubscribers.containsKey(topicName)) {
            System.out.println("No subscribers registered yet for topic: " + topicName);
            return;
        }
        MessageQueue messageQueue = topicToQueue.get(topicName);
        Message message = messageQueue.dequeue();
        for (Subscriber subscriber : topicToSubscribers.get(topicName)) {
            subscriber.readMessage(message, subscriber);
        }
    }

    public void deregister(Subscriber subscriber) {
        List<Subscriber> subscribers = topicToSubscribers.get(subscriber.getTopic().getName());
        boolean success = subscribers.remove(subscriber);
        if(success) {
            System.out.println("Subscriber de-registered successfully: " + subscriber.getSubscriberName() + " from topic: " + subscriber.getTopic().getName());
        } else {
            System.out.println("Subscriber not found: " + subscriber.getSubscriberName() + " in topic: " + subscriber.getTopic().getName());
        }
    }
}

public class PubSub {

    public static void main(String[] args) {
        Broker broker = new Broker(10);

        Topic topic1 = broker.createTopic("apple");
        Topic topic2 = broker.createTopic("samsung");

        Publisher publisher = new Publisher();

        Subscriber subscriber1 = new Subscriber("Nitesh", topic1);
        broker.registerSubscriber(subscriber1);

        Subscriber subscriber2 = new Subscriber("Kumar", topic2);
        broker.registerSubscriber(subscriber2);

        Subscriber subscriber3 = new Subscriber("Telio", topic1);
        broker.registerSubscriber(subscriber3);

        broker.publishMessage(publisher, new Message(topic1, "This is iphone 14"));
        broker.publishMessage(publisher, new Message(topic2, "This is samsung galaxy"));

        broker.deregister(subscriber3);
        broker.publishMessage(publisher, new Message(topic1, "This is iphone 14 pro max"));
    }
}
