mport java.time.LocalDateTime;
import java.util.Map;
import java.util.concurrent.*;

public class TokenBucketRateLimiter {
    private final int maxTokens;
    private final int refillAmount;
    private final Map<String, Bucket> userBuckets = new ConcurrentHashMap<>();

    public TokenBucketRateLimiter(int maxTokens, int refillAmount) {
        this.maxTokens = maxTokens;
        this.refillAmount = refillAmount;

        // Schedule refill every 1 minute
        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
        scheduler.scheduleAtFixedRate(this::refillAllBuckets, 1, 1, TimeUnit.MINUTES);
    }

    public boolean allowRequest(String userId) {
        Bucket bucket = userBuckets.computeIfAbsent(userId, id -> new Bucket(maxTokens));
        synchronized (bucket) {
            if (bucket.tokens > 0) {
                bucket.tokens--;
                return true;
            }
            return false;
        }
    }

    private void refillAllBuckets() {
        for (Bucket bucket : userBuckets.values()) {
            synchronized (bucket) {
                bucket.tokens = Math.min(maxTokens, bucket.tokens + refillAmount);
                System.out.println(LocalDateTime.now() + " - Refilled tokens to: " + bucket.tokens);
            }
        }
    }

    private static class Bucket {
        int tokens;

        Bucket(int initialTokens) {
            this.tokens = initialTokens;
        }
    }

    // Simple test
    public static void main(String[] args) throws InterruptedException {
        // Bucket capacity = 10, refill = 3 tokens per minute
        TokenBucketRateLimiter limiter = new TokenBucketRateLimiter(10, 3);
        String userId = "user123";

        // Simulate 15 requests (one every 4 seconds)
        for (int i = 1; i <= 15; i++) {
            boolean allowed = limiter.allowRequest(userId);
            System.out.println(LocalDateTime.now() + " - Request " + i + ": " + (allowed ? "Allowed" : "Rate Limited"));
            Thread.sleep(4000); // Wait 4 seconds
        }
    }
}

----------
package com.telio;

import java.time.Duration;
import java.time.Instant;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

class RateLimit {

    int rateLimit;
    Map<String, LinkedList<Request>> userRequestMap = new ConcurrentHashMap<>();

    public RateLimit(int limit) {
        this.rateLimit = limit;
    }

    /**
     * Thread safe block being invoked by multiple threads
     * @param user username
     * @param timestamp timestamp of request
     * @return request allowed true/false
     */
    public synchronized boolean hit(String user, Instant timestamp) {

        if (!userRequestMap.containsKey(user)) {
            return addNewUser(user);
        } else {
            if (getTotalElpasedRequests(user) < rateLimit) {
                LinkedList<Request> requests = userRequestMap.get(user);
                requests.add(new Request(timestamp, 1));
                userRequestMap.put(user, requests);
                return true;
            } else {
                boolean actionTaken = false;
                for (int i = 0; i < userRequestMap.get(user).size(); i++) {
                    Duration duration = Duration.between(userRequestMap.get(user).get(i).getTimestamp(), timestamp);
                    // check for elapsed time greater than 1 minute (60 seconds)
                    // This can be passed as an argument at runtime to avoid hardcoding
                    if (duration.getSeconds() >= 30) {
                        userRequestMap.get(user).remove(i);
                        actionTaken = true;
                    } else {
                        break;
                    }
                }

                if (actionTaken) {
                    LinkedList<Request> requests = userRequestMap.get(user);
                    requests.add(new Request(timestamp, 1));
                    userRequestMap.put(user, requests);
                    return true;
                }

                return false;
            }
        }
    }

    public boolean addNewUser(String user) {
        LinkedList<Request> requests = new LinkedList<>();
        requests.add(new Request(Instant.now(), 1));
        userRequestMap.put(user, requests);
        System.out.println("New User added !! " + user);
        return true;
    }

    public Integer getTotalElpasedRequests(String user) {
        return userRequestMap.get(user).stream().mapToInt(Request::getCount).sum();
    }

}
class RateLimitHelper extends Thread {

    RateLimit rateLimit;

    public RateLimitHelper(String user, RateLimit rateLimitService) {
        super(user);
        this.rateLimit = rateLimitService;
    }

    @Override
    public void run() {
        for (int i = 1; i <= 35; i++) {
            System.out.println("Thread Name - " + getName() + ", Time - " + i + ", rate limit: " + hit(getName(), Instant.now()));
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        System.out.println("DONE! " + getName());
    }

    public boolean hit(String user, Instant ts) {
        return rateLimit.hit(user, ts);
    }
}

class Request {
    private Instant timestamp;
    private Integer count;

    public Request(Instant timestamp, Integer count) {
        this.timestamp = timestamp;
        this.count = count;
    }

    public Instant getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Instant timestamp) {
        this.timestamp = timestamp;
    }

    public Integer getCount() {
        return count;
    }

    public void setCount(Integer count) {
        this.count = count;
    }
}

public class RateLimiterService {
    public static void main(String[] args) {
        int limit = 5; // 5 requests per minute
        RateLimit rateLimit = new RateLimit(limit);
        new RateLimitHelper("UserA", rateLimit).start();
        new RateLimitHelper("userB", rateLimit).start();
    }
}
