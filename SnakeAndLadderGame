import java.util.*;

public class SnakeAndLadderGame {

    public static void main(String[] args) {
        Game game = new Game();
        game.startGame();
    }
}

// === Game class ===
class Game {
    private Board board;
    private Queue<Player> players;
    private Dice dice;

    public Game() {
        initializeGame();
    }

    private void initializeGame() {
        // Setup snakes
        Map<Integer, Integer> snakes = new HashMap<>();
        snakes.put(99, 54);
        snakes.put(70, 55);
        snakes.put(52, 42);
        snakes.put(25, 2);
        snakes.put(95, 72);

        // Setup ladders
        Map<Integer, Integer> ladders = new HashMap<>();
        ladders.put(6, 25);
        ladders.put(11, 40);
        ladders.put(60, 85);
        ladders.put(46, 90);

        board = new Board(100, snakes, ladders);
        dice = new Dice(6);

        // Create players
        players = new LinkedList<>();
        players.offer(new Player("Player 1"));
        players.offer(new Player("Player 2"));
        players.offer(new Player("Player 3"));
        players.offer(new Player("Player 4"));
    }

    public void startGame() {
        List<String> winners = new ArrayList<>();

        while (players.size() > 1) {
            Player currentPlayer = players.poll();

            int diceValue = dice.roll();
            int oldPosition = currentPlayer.getPosition();
            int newPosition = oldPosition + diceValue;

            if (newPosition > board.getSize()) {
                System.out.println(currentPlayer.getName() + " rolled " + diceValue +
                        " but needs exact number to win. Staying at " + oldPosition);
                players.offer(currentPlayer);
            } else {
                newPosition = board.getNextPosition(newPosition);
                currentPlayer.setPosition(newPosition);
                System.out.println(currentPlayer.getName() + " rolled " + diceValue +
                        " and moved from " + oldPosition + " to " + newPosition);

                if (newPosition == board.getSize()) {
                    System.out.println("üéâ " + currentPlayer.getName() + " has won the game!");
                    winners.add(currentPlayer.getName());
                } else {
                    players.offer(currentPlayer);
                }
            }
        }

        // Add the last remaining player as the last rank
        if (!players.isEmpty()) {
            winners.add(players.poll().getName());
        }

        displayResults(winners);
    }

    private void displayResults(List<String> winners) {
        System.out.println("Final Rankings:");
        for (int i = 0; i < winners.size(); i++) {
            System.out.println("Rank " + (i + 1) + ": " + winners.get(i));
        }
    }
}

// === Board class ===
class Board {
    private int size;
    private Map<Integer, Integer> snakes;
    private Map<Integer, Integer> ladders;

    public Board(int size, Map<Integer, Integer> snakes, Map<Integer, Integer> ladders) {
        this.size = size;
        this.snakes = snakes;
        this.ladders = ladders;
    }

    public int getSize() {
        return size;
    }

    public int getNextPosition(int position) {
        if (snakes.containsKey(position)) {
            System.out.println("üêç Oops! Landed on a snake at " + position +
                    ", going down to " + snakes.get(position));
            return snakes.get(position);
        } else if (ladders.containsKey(position)) {
            System.out.println("ü™ú Yay! Landed on a ladder at " + position +
                    ", climbing up to " + ladders.get(position));
            return ladders.get(position);
        }
        return position;
    }
}

// === Player class ===
class Player {
    private String name;
    private int position;

    public Player(String name) {
        this.name = name;
        this.position = 0; // Start position
    }

    public String getName() {
        return name;
    }

    public int getPosition() {
        return position;
    }

    public void setPosition(int newPosition) {
        this.position = newPosition;
    }
}

// === Dice class ===
class Dice {
    private int faces;
    private Random random;

    public Dice(int faces) {
        this.faces = faces;
        this.random = new Random();
    }

    public int roll() {
        return random.nextInt(faces) + 1;
    }
}
