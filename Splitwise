package com.telio;

import java.time.LocalDateTime;
import java.util.*;

enum ExpenseType {
    EQUAL, PERCENT, EXACT;
}

// === User Class ===
class User {
    private String userId;
    private String name;
    private String email;
    private String phone;

    public User(String userId, String name, String email, String phone) {
        this.userId = userId;
        this.name = name;
        this.email = email;
        this.phone = phone;
    }

    public String getUserId() {
        return userId;
    }

    public String getName() {
        return name;
    }
}

// === Abstract Split Class ===
abstract class Split {
    private User user;
    private double amount;

    public Split(User user) {
        this.user = user;
    }

    public User getUser() {
        return user;
    }

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }
}

class EqualSplit extends Split {
    public EqualSplit(User user) {
        super(user);
    }
}

class PercentSplit extends Split {
    private double percent;

    public PercentSplit(User user, double percent) {
        super(user);
        this.percent = percent;
    }

    public double getPercent() {
        return percent;
    }
}

class ExactSplit extends Split {
    public ExactSplit(User user, double amount) {
        super(user);
        setAmount(amount);
    }
}

// === Abstract Expense Class ===
abstract class Expense {
    private String expenseId;
    private String description;
    private String paidByUserId;
    private LocalDateTime dateTime;
    private double amount;
    private List<Split> splits;

    public Expense(String description, String paidByUserId, double amount, List<Split> splits) {
        this.expenseId = UUID.randomUUID().toString();
        this.description = description;
        this.paidByUserId = paidByUserId;
        this.dateTime = LocalDateTime.now();
        this.amount = amount;
        this.splits = splits;
        validate();
    }

    public abstract void validate();

    public double getAmount() {
        return amount;
    }

    public String getPaidByUserId() {
        return paidByUserId;
    }

    public List<Split> getSplits() {
        return splits;
    }
}

class EqualExpense extends Expense {
    public EqualExpense(String description, String paidByUserId, double amount, List<Split> splits) {
        super(description, paidByUserId, amount, splits);
    }

    @Override
    public void validate() {
        double equalShare = getAmount() / getSplits().size();
        for (Split split : getSplits()) {
            split.setAmount(equalShare);
        }
    }
}

class PercentExpense extends Expense {
    public PercentExpense(String description, String paidByUserId, double amount, List<Split> splits) {
        super(description, paidByUserId, amount, splits);
    }

    @Override
    public void validate() {
        double totalPercent = 0;
        for (Split split : getSplits()) {
            if (!(split instanceof PercentSplit)) throw new RuntimeException("Invalid split type for PERCENT");
            totalPercent += ((PercentSplit) split).getPercent();
        }
        if (totalPercent != 100) {
            throw new RuntimeException("Total percentage does not equal 100");
        }

        for (Split split : getSplits()) {
            double percent = ((PercentSplit) split).getPercent();
            double splitAmount = getAmount() * percent / 100.0;
            split.setAmount(splitAmount);
        }
    }
}

class ExactExpense extends Expense {
    public ExactExpense(String description, String paidByUserId, double amount, List<Split> splits) {
        super(description, paidByUserId, amount, splits);
    }

    @Override
    public void validate() {
        double total = 0;
        for (Split split : getSplits()) {
            total += split.getAmount();
        }
        if (total != getAmount()) {
            throw new RuntimeException("Exact amounts do not match total expense");
        }
    }
}

// === ExpenseFactory ===
class ExpenseFactory {
    public static Expense createExpense(ExpenseType type, String description, String paidByUserId, double amount, List<Split> splits) {
        switch (type) {
            case EQUAL:
                return new EqualExpense(description, paidByUserId, amount, splits);
            case PERCENT:
                return new PercentExpense(description, paidByUserId, amount, splits);
            case EXACT:
                return new ExactExpense(description, paidByUserId, amount, splits);
            default:
                throw new IllegalArgumentException("Invalid expense type");
        }
    }
}

// === ExpenseManager ===
class ExpenseManager {
    private Map<String, User> userMap = new HashMap<>();
    private Map<String, Map<String, Double>> balanceSheet = new HashMap<>();
    private List<Expense> expenses = new ArrayList<>();

    public void addUser(User user) {
        userMap.put(user.getUserId(), user);
        balanceSheet.put(user.getUserId(), new HashMap<>());
    }

    public void addExpense(ExpenseType type, String description, String paidByUserId, double amount, List<Split> splits) {
        Expense expense = ExpenseFactory.createExpense(type, description, paidByUserId, amount, splits);
        expenses.add(expense);

        for (Split split : expense.getSplits()) {
            String paidToUserId = split.getUser().getUserId();
            double splitAmount = split.getAmount();

            if (paidToUserId.equals(paidByUserId)) continue;

            Map<String, Double> balances = balanceSheet.get(paidToUserId);
            balances.put(paidByUserId, balances.getOrDefault(paidByUserId, 0.0) + splitAmount);

            Map<String, Double> payerBalances = balanceSheet.get(paidByUserId);
            payerBalances.put(paidToUserId, payerBalances.getOrDefault(paidToUserId, 0.0) - splitAmount);
        }
    }

    public void showBalance(String userId) {
        Map<String, Double> balances = balanceSheet.get(userId);
        boolean hasBalance = false;

        for (Map.Entry<String, Double> entry : balances.entrySet()) {
            if (entry.getValue() != 0) {
                printBalance(userId, entry.getKey(), entry.getValue());
                hasBalance = true;
            }
        }

        if (!hasBalance) {
            System.out.println("No balances for " + userMap.get(userId).getName());
        }
    }

    public void showAllBalance() {
        boolean hasBalance = false;
        for (String user1 : balanceSheet.keySet()) {
            for (String user2 : balanceSheet.get(user1).keySet()) {
                double amount = balanceSheet.get(user1).get(user2);
                if (amount > 0) {
                    printBalance(user1, user2, amount);
                    hasBalance = true;
                }
            }
        }

        if (!hasBalance) {
            System.out.println("No balances");
        }
    }

    private void printBalance(String userId1, String userId2, double amount) {
        String name1 = userMap.get(userId1).getName();
        String name2 = userMap.get(userId2).getName();
        System.out.println(name1 + " owes " + name2 + ": â‚¹" + String.format("%.2f", amount));
    }
}

// === Main Class ===
public class Splitwise {
    public static void main(String[] args) {
        ExpenseManager manager = new ExpenseManager();

        User u1 = new User("u1", "Alice", "alice@mail.com", "1111111111");
        User u2 = new User("u2", "Bob", "bob@mail.com", "2222222222");
        User u3 = new User("u3", "Charlie", "charlie@mail.com", "3333333333");

        manager.addUser(u1);
        manager.addUser(u2);
        manager.addUser(u3);

        // Equal Expense
        List<Split> equalSplits = new ArrayList<>();
        equalSplits.add(new EqualSplit(u1));
        equalSplits.add(new EqualSplit(u2));
        equalSplits.add(new EqualSplit(u3));

        manager.addExpense(ExpenseType.EQUAL, "Dinner", "u1", 300, equalSplits);

        // Percent Expense
        List<Split> percentSplits = new ArrayList<>();
        percentSplits.add(new PercentSplit(u1, 40));
        percentSplits.add(new PercentSplit(u2, 20));
        percentSplits.add(new PercentSplit(u3, 40));

        manager.addExpense(ExpenseType.PERCENT, "Drinks", "u2", 200, percentSplits);

        // Exact Expense
        List<Split> exactSplits = new ArrayList<>();
        exactSplits.add(new ExactSplit(u1, 50));
        exactSplits.add(new ExactSplit(u2, 100));
        exactSplits.add(new ExactSplit(u3, 150));

        manager.addExpense(ExpenseType.EXACT, "Taxi", "u3", 300, exactSplits);

        System.out.println("\nAll balances:");
        manager.showAllBalance();

        System.out.println("\nBalance for u2:");
        manager.showBalance("u2");
    }
}
